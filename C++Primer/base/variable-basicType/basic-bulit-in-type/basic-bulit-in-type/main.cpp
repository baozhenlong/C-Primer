//
//  main.cpp
//  basic-bulit-in-type
//
//  Created by mac on 2018/7/4.
//  Copyright © 2018年 mac. All rights reserved.
//

//基本内置类型
#include <iostream>

int main(int argc, const char * argv[]) {
    // insert code here...
    std::cout << "Hello, World!\n";
    
    //---基本数据类型
    //1---算数类型（arithmetic type）
    //算数类型的尺寸：该类型数据所占的比特数
    //1.1---整型
    //1.1.1---字符
    //类型（char）---含义（字符）---最小尺寸（8位）
    //类型（wchar_t）---含义（宽字符）---最小尺寸（16位）
    //类型（char16_t）---含义（Unicode字符）---最小尺寸（16位）
    //类型（char32_t）---含义（Unicode字符）---最小尺寸（32位）
    //1.1.2---整型数
    //类型（short）---含义（短整型）---最小尺寸（16位）
    //类型（int）---含义（整型）---最小尺寸（16位）
    //类型（long）---含义（长整型）---最小尺寸（32位）
    //类型（long long）---含义（长整型）---最小尺寸（64位）
    //1.1.3--布尔值
    //类型（bool）---含义（布尔类型）---最小尺寸（未定义）
    //1.2---浮点型
    //浮点数
    //类型（float）---含义（单精度浮点数）---最小尺寸（6位有效数字）
    //类型（double）---含义（双精度浮点数）---最小尺寸（10位有效数字）
    //类型（long double）---含义（扩展精度浮点数）---最小尺寸（10位有效数字）
    //无符号类型（unsigned）---如unsigned char（[0, 255]）
    //有符号类型（signed）---如signed char（[-128, 127]）
    //2---空类型（void）
    //解读：空类型不对应具体的值，仅用于一些特殊的场合；如当函数不返回任何值时，使用void作为返回类型
    
    //---类型转换
    //自动转换
    bool b = 42;//true
    //把一个非布尔类型的算数值给布尔类型时，初始值为0，则结果为false，否则为true
    int i = b;//1
    //把一个布尔值赋给非布尔类型，false->0，true->1
    i = 3.14;//3
    //把一个浮点数赋给整数类型，结果仅保留浮点数中小数点之前的部分
    double pi = i;//3.0
    //把一个整数值赋给浮点数，小数部分为0；若所占空间超过容量，精度可能有损失
    unsigned char c = -1;//假设char占8比特位，255
    //把一个超出范围的值赋给无符号类型，结果是初始值对无符号类型表示值总数取模后的余数，即-1 % 256
    signed char c2 = 256;//假设char占8比特位，未定义
    //把一个超出范围的值赋给有符号类型，结果是未定义的
    
    //---字面值常量
    //每个字面值常量都对应一种数据类型，字面值常量的形式和值决定了它的数据类型
    //1---整型和浮点型字面值
    //十进制---20
    //八进制---024
    //十六进制0x14
    //3.14E2
    //3.14e2
    //2---字符和字符串字面值
    //'a'---字符字面值
    //"hello"---字符串字面值
    //3---转义序列
    //4---指定字面值类型
    //5---布尔字面值和指针字面值
    //true、false
    //nullptr

    return 0;
}
