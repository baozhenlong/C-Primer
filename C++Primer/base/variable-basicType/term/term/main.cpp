//
//  main.cpp
//  term
//
//  Created by mac on 2018/7/6.
//  Copyright © 2018年 mac. All rights reserved.
//

//术语表
//字---在指定机器上进行整数运算的自然单位；一般来说字的空间足够存放地址；32位机器上的字通常占据4个字节
//地址---是一个数字，根据它可以找到内存中的一个字节
//字节---内存中可寻址的最小单元，大多数机器的字节占8位
//算术类型---布尔值、字符、整数、浮点数等内置类型
//数组---是一种数据结构，存放着一组未命名的对象，可以通过索引来访问这些对象
//&运算符---取地址运算符
//*运算符---解引用运算符；解引用一个指针将返回该指针所指的对象，为解引用的结果赋值也就是为指针所指的对象赋值

//常量表达式---能在编译时计算并获取结果的表达式
//constexpr---是一种函数，用于代表一条常量表达式
//字面值---是一个不能改变的值，如数字、字符、字符串等；'字符字面值'，"字符串字面值"

//标识符---组成名字的字符序列，对大小写敏感
//对象---内存的一块区域，具有某种类型，变量是命了名的对象
//变量---命名的对象或引用；C++要求变量要先声明后使用

//声明---声称存在一个变量、函数、别处定义的类型；名字必须在定义或声明之后才能使用
//声明符---是声明的一部分，包括被定义的名字和类型修饰符，其中类型修饰符可有可无
//别名声明---为另外一种类型定义一个同义词
//类型别名---是一个名字，是另外一个类型的同义词，通过关键字typedef或别名声明语句来定义
//typedef---为某类型定义一个别名；当关键字typedef作为声明的基本类型出现时，声明中定义的名字就是类型名
//类型检查---是一个过程，编译器检查程序中使用某给定类型对象的方式与该类型的定义是否一致
//类型说明符---类型的名字
//void*---可以指向任意非常量的指针类型，不能执行解引用操作
//void类型---是一种有特殊用处的类型，既无操作也无值；不能定义一个void类型的变量

//const---是一种类型修饰符，用于说明永不改变的对象；const对象一旦定义就无法再赋新值，所以必须初始化
//底层const---是一个不属于顶层的const，类型如果由底层常量定义，则不可以忽略
//顶层const---是一个const，规定某对象的值不能改变

//auto---是一个类型说明符，通过变量的初始值来推断变量的类型
//decltype---是一个类型说明符，从变量或表达式推断得到类型
//基本类型---是类型说明符，可用const修饰，在声明语句中位于声明符之前；基本类型提供了最常见的数据类型
//复合类型---是一种类型，它的定义以其他类型为基础
//带符号类型---保存正数、负数、0的整型
//无符号类型---保存大于等于=的整型
//字符串---是一种库类型，表示可变长字符序列
//临时值---编译器在计算表达式结果时创建的无名对象；为某表达式创建了一个临时值，则此临时值将一直存在到包含有该表达式的最大的表达式计算完成为止


//绑定---令某个名字与给定的实体关联在一起，使用该名子也就是使用该实体
//定义---为某一特定类型的变量申请存储空间，可以选择初始化该变量；名字必须在定义或声明之后才能使用

//未初始化
//默认初始化---当对象未被显式地赋予初始值时，执行的初始化行为；全局作用域的内置类型对象初始化为0；局部作用域的对象未被初始化即拥有未定义的值
//被初始化---变量在定义的同时被赋予初始值，变量一般都应该被初始化
//列表初始化---利用花括号把一个或多个初始值放在一起的初始化形式

//转义序列---字符（特别是那些不可打印字符）的替代形式；转义以反斜线开后，后面紧跟一个字符，或者不多于3个八进制数字，或者字母x+1个十六进制数
//不可打印字符---不具有可见形式的字符。如控制符、退格、换行符

//作用域---是程序的一部分，在其中某些名字有意义
//全局作用域---位于其他所有作用域之外的作用域
//在作用域内---名字在当前作用域内可见
//内层作用域---嵌套在其他作用域之内的作用域
//外层作用域---嵌套着别的作用域的作用域
//局部作用域---是块作用域的习惯叫法

//转换---1种类型的值转变成另一种类型值的过程；C++支持内置类型之间的转换

//引用---某个对象的别名
//常量引用（对常量的引用）---是一种习惯叫法，含义是指向常量的引用；是一个引用，不能用来改变它所绑定对象的值；对常量的引用可以绑定常量对象，或者非常量对象，或者表达式的结果

//指针---是一个对象，存放着某个对象的地址，或者某个对象存储区域之后的下一地址，或者0
//空指针---值为0的指针，空指针合法，但不指向任何对象
//nullptr---表示空指针的字面值常量
//指向常量的指针---是一个指针，存放着某个常量对象的地址；不能用来改变它所指对象的值
//常量指针---是一种指着，它的值永不改变

//全局---名字定义在所有作用域之外
//命名空间---名字定义在命名空间内部
//块---名字定义在块内部
//类---名字定义在类内部

//struct---关键字，用于定义类
//类成员---类的组成部分
//数据成员---组成对象的数据元素，类的每个对象都有类的数据成员的一份拷贝；数据成员可以在类内部声明的同时初始化
//类内初始值---在声明类的数据成员时，同时提供的初始值，必须置于等号右侧或花括号内

//预处理器---在C++编译过程中执行的一段程序
//预处理变量---由预处理器管理的变量；在程序编译之前，预处理器负责将程序中的预处理变量替换成它的真是值
//头文件保护符---使用预处理变量以防头文件被某个文件重复包含
//#define---是一条预处理指令，用于定义一个预处理变量
//#endif---是一条预处理指令，用于结束一个#ifdef或#ifndef区域
//#ifdef---是一条预处理指令，用于判断给定的变量是否已经定义
//#ifndef---是一条预处理指令，用于判断给定的变量是否尚未定义

#include <iostream>

int main(int argc, const char * argv[]) {
    // insert code here...
    std::cout << "Hello, World!\n";
    return 0;
}
