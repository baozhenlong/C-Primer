//
//  main.cpp
//  variable
//
//  Created by mac on 2018/7/4.
//  Copyright © 2018年 mac. All rights reserved.
//

//变量
//提供一个具名的、可供程序操作的存储空间
//C++中的每个变量都有其数据类型，数据类型决定着变量所占内存空间的大小和布局方式、该空间能存储的值的范围、变量能参与的运算
#include <iostream>

int main(int argc, const char * argv[]) {
    // insert code here...
    std::cout << "Hello, World!\n";
    
    //---变量定义
    //类型说明符 变量名列表（以逗号分隔）;（以分号结束）
    int sum = 0, a, b = 0;
    //sum、a、b的类型为int
    //sum和b的初始值为0
    //---初始值
    //初始化不是赋值
    //初始化：创建变量时，赋予其一个初始值
    //赋值：把对象的当前值擦除，而以一个新值来替代
    //---默认初始化
    //如果内置类型的变量未被显式初始化，它的值由定义的位置决定：
    //定义与任何函数之外的内置类型的对象，如果没有显式初始化，则其值被初始化为0；
    //定义与函数体内的内置类型的对象，如果没有显式初始化，则其值未定义
    //类的对象，如果没有显式初始化，则其值由类确定
    
    //---变量声明和定义的关系
    //1---声明---使得名字为程序所知，一个文件如果向使用别出定义的名字，则必须包含对那个名字的声明
    //声明规定了变量的类型和名字
    extern int i;//声明i
    //extren语句如果包含初始值就不再是声明，而变成定义了
    //在函数体内部，如果试图初始化一个由extern关键字标记的变量，将引发错误
    //2---定义---负责创建与名字关联的实体
    //定义还为变量申请了存储空间
    //任何包含了显示初始化的声明即成为定义
    int j;//声明并定义j---内置类型默认被初始化
    //变量能且只能被定义1次，但可以被多次声明
    
    //---静态类型
    //C++是1种静态类型语言，其含义是在编译阶段检查类型；其中检查类型的过程称为类型检查
    
    //---标识符
    //由字母、数字、下画线组成；其中必须以字母或下画线开头
    //用户自定义的标识符不能连续出现2个下画线，也不能以下划线紧连大写字母开头，定义在函数体外的标志符不能以下画线开头
    //---变量命名规范
    //标志符要能体现实际含义
    //变量名一般用小写字母（index）
    //用户自定义的类名一般以大写字母开头（Student）
    //如果标识符由多个单词组成，则单词见应有明显区分（studentLoan | student_loan）
    
    //---名字的作用域
    //不论在程序的什么位置，使用到的每个名字都会指向1个特定的实体：变量、函数、类型等
    //然而，同一个名字如果出现在程序的不同位置，也可能指向的是不同实体
    //名字的有效区域---始于名字的声明语句，以声明语句所在的作用域末端为结束
    int result = 0;
    for(int value = 1; value < 5; value++){
        result += value;
    }
    std::cout << "result = " << result << std::endl;//10
    //main---全局作用域；一旦声明之后，全局作用域内的名字在整个程序的范围内都可使用
    //result---块作用域；从result声明开始到main函数结束为止
    //---嵌套作用域
    //作用域中一旦声明了某个名字，它的内层作用域中都能访问该名字；同时，允许在内层作用域中重新定义外层作用域已有的名字
    int reused = 0;
    std::cout << "reused = " << reused << std::endl;//0
    {
        int reused = 1;
        std::cout << "重新定义 reused = " << reused << std::endl;//1
    }
    
    return 0;
}
